
import { corsHeaders, ErrorResponse } from './types.ts';

export function createErrorResponse(
  error: string,
  details: string,
  status: number = 500,
  timestamp?: string
): Response {
  console.error(`üö® [ERROR] Criando resposta de erro: ${status} - ${error}`);
  
  const errorResponse: ErrorResponse = {
    error,
    details,
    status,
    timestamp: timestamp || new Date().toISOString()
  };

  return new Response(
    JSON.stringify(errorResponse),
    { 
      status, 
      headers: { 
        ...corsHeaders, 
        'Content-Type': 'application/json' 
      } 
    }
  );
}

export function handleApiError(response: Response, data: any, timestamp: string): Response {
  console.error(`‚ùå [API_ERROR] Erro HTTP ${response.status}:`, data);

  let errorMessage = `Erro ${response.status}`;
  let errorDetails = 'Erro na API Pagar.me';

  switch (response.status) {
    case 400:
      errorMessage = 'Requisi√ß√£o inv√°lida';
      errorDetails = data?.message || 'Par√¢metros inv√°lidos enviados para a API';
      break;
    case 401:
      errorMessage = 'Chave API inv√°lida';
      errorDetails = 'Verifique sua chave de API no dashboard da Pagar.me';
      break;
    case 403:
      errorMessage = 'Acesso negado';
      errorDetails = 'Chave de API sem permiss√µes necess√°rias';
      break;
    case 404:
      errorMessage = 'Endpoint n√£o encontrado';
      errorDetails = 'Verifique se o endpoint est√° correto';
      break;
    case 422:
      errorMessage = 'Par√¢metros inv√°lidos';
      errorDetails = data?.message || 'Verifique os par√¢metros enviados';
      break;
    case 429:
      errorMessage = 'Limite de requisi√ß√µes excedido';
      errorDetails = 'Aguarde alguns momentos antes de tentar novamente';
      break;
    case 500:
      errorMessage = 'Erro interno da Pagar.me';
      errorDetails = 'Tente novamente em alguns minutos';
      break;
    default:
      if (response.status >= 500) {
        errorMessage = 'Erro interno da Pagar.me';
        errorDetails = 'Servi√ßo temporariamente indispon√≠vel';
      }
  }

  return createErrorResponse(errorMessage, errorDetails, response.status, timestamp);
}

export function handleFetchError(error: any, timestamp: string): Response {
  console.error(`‚ùå [FETCH_ERROR] Erro na requisi√ß√£o:`, error);
  
  if (error.name === 'AbortError') {
    console.error(`‚è∞ [FETCH_ERROR] Timeout na requisi√ß√£o`);
    return createErrorResponse(
      'Timeout na requisi√ß√£o',
      'A requisi√ß√£o demorou mais que 30 segundos',
      408,
      timestamp
    );
  }
  
  if (error.message?.includes('network')) {
    return createErrorResponse(
      'Erro de rede',
      'Falha na conex√£o com a API Pagar.me',
      502,
      timestamp
    );
  }
  
  return createErrorResponse(
    'Erro de comunica√ß√£o',
    error.message || 'Erro desconhecido na requisi√ß√£o',
    500,
    timestamp
  );
}

export function handleParseError(parseError: any): Response {
  console.error(`‚ùå [PARSE_ERROR] Erro no parse:`, parseError);
  return createErrorResponse(
    'JSON inv√°lido',
    'Corpo da requisi√ß√£o deve conter JSON v√°lido',
    400
  );
}
